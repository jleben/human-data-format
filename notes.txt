
### Plain scalars:

Plain scalars and keys in mappings should have the maximal freedom without making a document look confusing. That's a fuzzy statement, but it's still valuable.

Plain scalars must conform to a pre-defined type. Where a scalar is expected, it should have the longest possible text match.
That means it can even contain stuff like ": " or ", " or "[" etc...
The also means we have to define a type for plain words and indetifiers like "one two", "one_two", etc.

Nonetheless, scalar types should be defined without interfering with other syntax rules if at all possible. If some established syntax is not compatible, then a compatible alternative can be defined, with a well-defined relation. If that's really not possible or very inconvenient, the user can use the literal scalar form instead. One such example are regular expressions: they can not be a plain scalar, but they are already super complicated and forcing the user to use an alternative would be a nightmare. So a non-plain scalar form must be used.

Quoted strings are not part of core syntax. They are simply scalars like any other. A scalar type could be defined that is a quoted string that interprets escapes like \n and \t so user can enter these without actually breaking the structure of the document much.

A parser could expose control over the scalar types that they use.
Either a set of types to try in a particular order for any scalar, or a mapping between a path to the scalar and its type.

### Simplified flow collections

Allow flow collections without any brackets.
A list:
    one, two, three
A map:
    a: 1, b: 2, c: 3

Ambiguous:
    a, b: 1, c
    a: 1, 2, 3

Possible solution:
    Prohibit the above examples.
    All sections separated by "," should be either all scalars or all key-value pairs.
    Use "(" for grouping:
        a, (b: 1), c
        a: (1, 2, 3)
    Exception:
        a:
            1, 2, 3
    The above is allowed, because after "a:\n" a new scalar starts.


Problem, you need to look past the first list entry to know that it's a list.
That's a problem if first entry is a potentially large sub-structure, like this:
    (1, 2, 3), b, c

Solution: Don't "," after "(...)". If you want a list with sublist as first element, you need to wrap it all:
    ((1, 2, 3), b, c)

Solution: Don't allow lists as elements of other lists. Only mappings can be list elements. Cruel?


### Support for tabs

Original problem: In the following, position of 'b' can not be compare to 'a' if 'b' is preceded by a tab.
    - a: 1
      b: 2

Solutiong:
    Following "-" must be either a flow node, or a line break.
    So the following is ok, because a flow node does not need to compare vertical position:
    - a: 1,
      b: 2

    The following is also ok, because all map entries have equal prefix:
    -
      a: 1
      b: 2

### Lists without '-' and maps with '-'


List entries don't need to be prefixed with '-'.
List and mapping entries are both optionally prefix with '-'.

Problem:
    You need to look past the first list entry to know that it is a list.
    This is OK as long as you don't need to look past a complex structure, like this:
        (1, 2, 3)
        b
        c

Solution: (similar as for flow collections)
    Don't allow lists as direct elements of lists.
    So expect end of file after "(1, 2, 3)".
    Too cruel?

Solution:
    There is no block form for a single scalar. A block is either a list or a mapping.
    So the following equals [a]:
        a
    And the following equals [a, b]:
        a
        b
    But this is {a: 1, b: 2}, because "1" and "2" are in flow form.
        a: 1
        b: 2
    Likewise, this is just [a, b]:
        - a
        - b
    But this is [[a],[b]]
        -
          a
        -
          b
    Is that too weird, that whitespace between "-" and "a" would change the meaning of "a"?


Problem: If "-" can be in front of each mapping entry, how to write [{a:1},{b:2}] in block form?
    The following would be interpreted as {a:1, b:2}
    - a: 1
    - b: 2


### Alternative structure delineator characters

The purpose is to allow scalars to start with anything, including "- ", "> ", ": ", etc.

Can we allow any punctuation character instead of '-'?
Or maybe the user can replace the whole set of special characters with another?


### Verbatim scalars

one: > After "> ", all text is interpreted verbatim.

two:
    >
        If > is followed by a line break, what follows is a multi-line scalar.
    The left boundary is set at >, so the space in front of the above line is preserved.
    Line breaks are preserved.
    When < is followed by a line break and then unindent or end of file, it ends the scalar.
    <
